[mpiexec@ubuntu] match_arg (utils/args/args.c:160): unrecognized argument Nodes_Num
[mpiexec@ubuntu] HYDU_parse_array (utils/args/args.c:175): argument matching returned error
[mpiexec@ubuntu] parse_args (ui/mpich/utils.c:1603): error parsing input array
[mpiexec@ubuntu] HYD_uii_mpx_get_parameters (ui/mpich/utils.c:1655): unable to parse user arguments
[mpiexec@ubuntu] main (ui/mpich/mpiexec.c:128): error parsing parameters
[mpiexec@ubuntu] match_arg (utils/args/args.c:160): unrecognized argument Nodes_Num
[mpiexec@ubuntu] HYDU_parse_array (utils/args/args.c:175): argument matching returned error
[mpiexec@ubuntu] parse_args (ui/mpich/utils.c:1603): error parsing input array
[mpiexec@ubuntu] HYD_uii_mpx_get_parameters (ui/mpich/utils.c:1655): unable to parse user arguments
[mpiexec@ubuntu] main (ui/mpich/mpiexec.c:128): error parsing parameters
======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 1 MPI processes
  type: seq
0.
0.0316008
0.0601083
0.082732
0.0972572
0.102262
0.0972572
0.082732
0.0601083
0.0316008
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 1 processor, by hjy Fri Jun 10 01:45:34 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           3.358e-01     1.000   3.358e-01
Objects:              7.000e+00     1.000   7.000e+00
Flops:                7.300e+06     1.000   7.300e+06  7.300e+06
Flops/sec:            2.174e+07     1.000   2.174e+07  2.174e+07
Memory (bytes):       1.254e+05     1.000   1.254e+05  1.254e+05
MPI Msg Count:        0.000e+00     0.000   0.000e+00  0.000e+00
MPI Msg Len (bytes):  0.000e+00     0.000   0.000e+00  0.000e+00
MPI Reductions:       0.000e+00     0.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 3.3584e-01 100.0%  7.2999e+06 100.0%  0.000e+00   0.0%  0.000e+00        0.0%  0.000e+00   0.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

VecView                1 1.0 2.9088e-04 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 2.1671e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  6  0  0  0  0   6  0  0  0  0     0
VecAXPY            99999 1.0 2.3722e-02 1.0 2.20e+06 1.0 0.0e+00 0.0e+00 0.0e+00  7 30  0  0  0   7 30  0  0  0    93
VecAssemblyBegin  100001 1.0 1.1530e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
VecAssemblyEnd    100001 1.0 1.1043e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatMult            99999 1.0 3.4857e-02 1.0 5.10e+06 1.0 0.0e+00 0.0e+00 0.0e+00 10 70  0  0  0  10 70  0  0  0   146
MatAssemblyBegin       3 1.0 6.7800e-07 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 1.7975e-05 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     3              3         5208     0.
              Matrix     1              1         3988     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 3.98e-08
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 10
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 2 MPI processes
  type: mpi
Process [0]
0.
0.0158981
0.0314046
0.0461379
0.0597352
0.0718615
0.0822184
0.0905508
0.0966536
0.100376
0.101628
Process [1]
0.100376
0.0966536
0.0905508
0.0822184
0.0718615
0.0597352
0.0461379
0.0314046
0.0158981
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 2 processors, by hjy Fri Jun 10 01:47:54 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           1.301e+02     1.000   1.301e+02
Objects:              1.400e+01     1.000   1.400e+01
Flops:                7.500e+06     1.103   7.150e+06  1.430e+07
Flops/sec:            5.764e+04     1.103   5.495e+04  1.099e+05
Memory (bytes):       2.786e+05     1.000   2.786e+05  5.572e+05
MPI Msg Count:        4.000e+05     1.000   4.000e+05  8.000e+05
MPI Msg Len (bytes):  3.200e+06     1.000   8.001e+00  6.401e+06
MPI Reductions:       6.001e+05     1.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 1.3011e+02 100.0%  1.4300e+07 100.0%  8.000e+05 100.0%  8.001e+00      100.0%  6.001e+05 100.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

BuildTwoSided     100005 1.0 3.5285e+01 1.0 0.00e+00 0.0 2.0e+05 1.2e+01 2.0e+05 27  0 25 37 33  27  0 25 37 33     0
BuildTwoSidedF    100004 1.0 8.0087e+01 1.0 0.00e+00 0.0 6.0e+05 8.0e+00 2.0e+05 61  0 75 75 33  61  0 75 75 33     0
VecView                1 1.0 7.8014e-05 2.3 0.00e+00 0.0 1.0e+00 8.4e+01 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 6.5833e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY            99999 1.0 1.3832e-01 1.0 2.20e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0    30
VecAssemblyBegin  100001 1.0 9.8991e+01 1.0 0.00e+00 0.0 6.0e+05 8.0e+00 4.0e+05 74  0 75 75 67  74  0 75 75 67     0
VecAssemblyEnd    100001 1.0 3.9126e+00 1.9 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  2  0  0  0  0   2  0  0  0  0     0
VecScatterBegin    99999 1.0 1.9791e+00 1.2 0.00e+00 0.0 2.0e+05 8.0e+00 2.0e+00  1  0 25 25  0   1  0 25 25  0     0
VecScatterEnd      99999 1.0 4.9066e+00 2.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatMult            99999 1.0 6.9884e+00 1.5 5.30e+06 1.1 2.0e+05 8.0e+00 2.0e+00  4 71 25 25  0   4 71 25 25  0     1
MatAssemblyBegin       3 1.0 1.2143e-03 1.2 0.00e+00 0.0 4.0e+00 1.8e+01 1.2e+01  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 2.7818e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 1.9e+01  0  0  0  0  0   0  0  0  0  0     0
SFSetGraph             1 1.0 3.2870e-06 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFSetUp                1 1.0 3.3033e-04 1.1 0.00e+00 0.0 4.0e+00 4.0e+00 2.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFPack             99999 1.0 5.7233e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFUnpack           99999 1.0 4.2178e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     5              5         9024     0.
              Matrix     3              3        11284     0.
           Index Set     2              2         1804     0.
   Star Forest Graph     1              1         1208     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 9.75e-08
Average time for MPI_Barrier(): 6.24786e-05
Average time for zero size MPI_Send(): 5.52455e-05
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 20
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 3 MPI processes
  type: mpi
Process [0]
0.
0.0106107
0.0211052
0.0313685
0.0412881
0.0507553
0.0596664
0.0679238
0.075437
0.0821238
0.0879107
Process [1]
0.0927345
0.0965423
0.0992923
0.100954
0.101511
0.100954
0.0992923
0.0965423
0.0927345
0.0879107
Process [2]
0.0821238
0.075437
0.0679238
0.0596664
0.0507553
0.0412881
0.0313685
0.0211052
0.0106107
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 3 processors, by hjy Fri Jun 10 01:52:01 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           1.717e+02     1.000   1.717e+02
Objects:              1.400e+01     1.000   1.400e+01
Flops:                7.500e+06     1.103   7.100e+06  2.130e+07
Flops/sec:            4.368e+04     1.103   4.135e+04  1.240e+05
Memory (bytes):       2.787e+05     1.000   2.786e+05  8.357e+05
MPI Msg Count:        5.500e+05     1.100   5.333e+05  1.600e+06
MPI Msg Len (bytes):  4.401e+06     1.100   8.001e+00  1.280e+07
MPI Reductions:       6.001e+05     1.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 1.7172e+02 100.0%  2.1300e+07 100.0%  1.600e+06 100.0%  8.001e+00      100.0%  6.001e+05 100.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

BuildTwoSided     100005 1.0 4.8593e+01 1.1 0.00e+00 0.0 4.0e+05 1.2e+01 2.0e+05 27  0 25 37 33  27  0 25 37 33     0
BuildTwoSidedF    100004 1.0 9.8682e+01 1.0 0.00e+00 0.0 1.2e+06 8.0e+00 2.0e+05 56  0 75 75 33  56  0 75 75 33     0
VecView                1 1.0 2.4757e-04 6.8 0.00e+00 0.0 2.0e+00 8.4e+01 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 6.1198e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY            99999 1.0 1.2447e-01 1.1 2.20e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0    50
VecAssemblyBegin  100001 1.0 1.3377e+02 1.1 0.00e+00 0.0 1.2e+06 8.0e+00 4.0e+05 75  0 75 75 67  75  0 75 75 67     0
VecAssemblyEnd    100001 1.0 4.1757e+0010.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     0
VecScatterBegin    99999 1.0 2.2476e+00 1.3 0.00e+00 0.0 4.0e+05 8.0e+00 2.0e+00  1  0 25 25  0   1  0 25 25  0     0
VecScatterEnd      99999 1.0 9.5320e+0012.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  2  0  0  0  0   2  0  0  0  0     0
MatMult            99999 1.0 1.2120e+01 3.8 5.30e+06 1.1 4.0e+05 8.0e+00 2.0e+00  4 71 25 25  0   4 71 25 25  0     1
MatAssemblyBegin       3 1.0 2.6618e-03 1.0 0.00e+00 0.0 8.0e+00 1.8e+01 1.2e+01  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 4.6267e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 1.9e+01  0  0  0  0  0   0  0  0  0  0     0
SFSetGraph             1 1.0 2.4820e-06 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFSetUp                1 1.0 5.8005e-04 1.0 0.00e+00 0.0 8.0e+00 4.0e+00 2.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFPack             99999 1.0 1.1016e-01 2.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFUnpack           99999 1.0 3.8714e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     5              5         9024     0.
              Matrix     3              3        11284     0.
           Index Set     2              2         1804     0.
   Star Forest Graph     1              1         1208     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 3.65e-08
Average time for MPI_Barrier(): 0.000163219
Average time for zero size MPI_Send(): 5.3568e-05
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 30
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 4 MPI processes
  type: mpi
Process [0]
0.
0.00796122
0.0158733
0.0236876
0.0313558
0.0388308
0.0460663
0.0530177
0.0596424
0.0658993
0.0717499
Process [1]
0.0771581
0.0820907
0.0865171
0.0904101
0.0937457
0.0965034
0.098666
0.10022
0.101157
0.10147
Process [2]
0.101157
0.10022
0.098666
0.0965034
0.0937457
0.0904101
0.0865171
0.0820907
0.0771581
0.0717499
Process [3]
0.0658993
0.0596424
0.0530177
0.0460663
0.0388308
0.0313558
0.0236876
0.0158733
0.00796122
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 4 processors, by hjy Fri Jun 10 01:56:28 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           2.541e+02     1.000   2.541e+02
Objects:              1.400e+01     1.000   1.400e+01
Flops:                7.500e+06     1.103   7.075e+06  2.830e+07
Flops/sec:            2.951e+04     1.103   2.784e+04  1.114e+05
Memory (bytes):       2.787e+05     1.000   2.786e+05  1.114e+06
MPI Msg Count:        7.000e+05     1.400   6.000e+05  2.400e+06
MPI Msg Len (bytes):  5.601e+06     1.400   8.001e+00  1.920e+07
MPI Reductions:       6.001e+05     1.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 2.5415e+02 100.0%  2.8300e+07 100.0%  2.400e+06 100.0%  8.001e+00      100.0%  6.001e+05 100.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

BuildTwoSided     100005 1.0 7.9981e+01 1.2 0.00e+00 0.0 6.0e+05 1.2e+01 2.0e+05 29  0 25 37 33  29  0 25 37 33     0
BuildTwoSidedF    100004 1.0 1.5268e+02 1.0 0.00e+00 0.0 1.8e+06 8.0e+00 2.0e+05 59  0 75 75 33  59  0 75 75 33     0
VecView                1 1.0 4.3617e-0414.6 0.00e+00 0.0 3.0e+00 8.4e+01 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 6.7877e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY            99999 1.0 1.5203e-01 1.1 2.20e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0    54
VecAssemblyBegin  100001 1.0 1.9204e+02 1.0 0.00e+00 0.0 1.8e+06 8.0e+00 4.0e+05 74  0 75 75 67  74  0 75 75 67     0
VecAssemblyEnd    100001 1.0 4.8891e+0011.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     0
VecScatterBegin    99999 1.0 3.0529e+00 1.4 0.00e+00 0.0 6.0e+05 8.0e+00 2.0e+00  1  0 25 25  0   1  0 25 25  0     0
VecScatterEnd      99999 1.0 1.4848e+0116.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatMult            99999 1.0 1.8159e+01 5.0 5.30e+06 1.1 6.0e+05 8.0e+00 2.0e+00  4 71 25 25  0   4 71 25 25  0     1
MatAssemblyBegin       3 1.0 4.2851e-03 1.1 0.00e+00 0.0 1.2e+01 1.8e+01 1.2e+01  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 5.1749e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 1.9e+01  0  0  0  0  0   0  0  0  0  0     0
SFSetGraph             1 1.0 3.3060e-06 1.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFSetUp                1 1.0 1.8890e-03 1.2 0.00e+00 0.0 1.2e+01 4.0e+00 2.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFPack             99999 1.0 1.2735e-01 2.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFUnpack           99999 1.0 4.1515e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     5              5         9024     0.
              Matrix     3              3        11284     0.
           Index Set     2              2         1804     0.
   Star Forest Graph     1              1         1208     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 3.96e-08
Average time for MPI_Barrier(): 0.000128116
Average time for zero size MPI_Send(): 3.60355e-05
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 40
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 5 MPI processes
  type: mpi
Process [0]
0.
0.00637014
0.0127151
0.01901
0.0252298
0.03135
0.0373465
0.0431956
0.0488743
0.05436
0.0596312
Process [1]
0.0646671
0.0694478
0.0739544
0.0781691
0.0820754
0.0856577
0.0889019
0.0917954
0.0943265
0.0964854
Process [2]
0.0982635
0.0996537
0.100651
0.101251
0.101451
0.101251
0.100651
0.0996537
0.0982635
0.0964854
Process [3]
0.0943265
0.0917954
0.0889019
0.0856577
0.0820754
0.0781691
0.0739544
0.0694478
0.0646671
0.0596312
Process [4]
0.05436
0.0488743
0.0431956
0.0373465
0.03135
0.0252298
0.01901
0.0127151
0.00637014
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 5 processors, by hjy Fri Jun 10 02:03:28 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           2.718e+02     1.000   2.718e+02
Objects:              1.400e+01     1.000   1.400e+01
Flops:                7.500e+06     1.103   7.060e+06  3.530e+07
Flops/sec:            2.760e+04     1.103   2.598e+04  1.299e+05
Memory (bytes):       2.787e+05     1.000   2.786e+05  1.393e+06
MPI Msg Count:        8.500e+05     1.700   6.400e+05  3.200e+06
MPI Msg Len (bytes):  6.801e+06     1.700   8.002e+00  2.561e+07
MPI Reductions:       6.001e+05     1.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 2.7178e+02 100.0%  3.5300e+07 100.0%  3.200e+06 100.0%  8.002e+00      100.0%  6.001e+05 100.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

BuildTwoSided     100005 1.0 7.9376e+01 1.2 0.00e+00 0.0 8.0e+05 1.2e+01 2.0e+05 26  0 25 37 33  26  0 25 37 33     0
BuildTwoSidedF    100004 1.0 1.6394e+02 1.0 0.00e+00 0.0 2.4e+06 8.0e+00 2.0e+05 59  0 75 75 33  59  0 75 75 33     0
VecView                1 1.0 1.4441e-04 4.3 0.00e+00 0.0 4.0e+00 8.4e+01 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 6.1421e-02 1.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY            99999 1.0 1.4134e-01 1.1 2.20e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0    72
VecAssemblyBegin  100001 1.0 2.1478e+02 1.1 0.00e+00 0.0 2.4e+06 8.0e+00 4.0e+05 76  0 75 75 67  76  0 75 75 67     0
VecAssemblyEnd    100001 1.0 4.7206e+0011.9 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     0
VecScatterBegin    99999 1.0 2.6009e+00 1.4 0.00e+00 0.0 8.0e+05 8.0e+00 2.0e+00  1  0 25 25  0   1  0 25 25  0     0
VecScatterEnd      99999 1.0 1.3583e+0122.2 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  2  0  0  0  0   2  0  0  0  0     0
MatMult            99999 1.0 1.6670e+01 6.0 5.30e+06 1.1 8.0e+05 8.0e+00 2.0e+00  3 71 25 25  0   3 71 25 25  0     2
MatAssemblyBegin       3 1.0 5.2735e-03 1.1 0.00e+00 0.0 1.6e+01 1.8e+01 1.2e+01  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 4.5998e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 1.9e+01  0  0  0  0  0   0  0  0  0  0     0
SFSetGraph             1 1.0 2.5810e-06 1.6 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFSetUp                1 1.0 1.2267e-03 1.3 0.00e+00 0.0 1.6e+01 4.0e+00 2.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFPack             99999 1.0 1.2487e-01 2.5 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFUnpack           99999 1.0 5.0184e-02 1.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     5              5         9024     0.
              Matrix     3              3        11284     0.
           Index Set     2              2         1804     0.
   Star Forest Graph     1              1         1208     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 3.51e-08
Average time for MPI_Barrier(): 0.00014244
Average time for zero size MPI_Send(): 3.80756e-05
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 50
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


======> Essential BC at x=0: prescribed temperature.
======> Essential BC at x=0: prescribed temperature.
======> Solving Process Done <======
Vec Object: 6 MPI processes
  type: mpi
Process [0]
0.
0.00530898
0.0106034
0.0158688
0.0210907
0.0262547
0.0313468
0.036353
0.0412595
0.046053
0.0507202
Process [1]
0.0552484
0.0596252
0.0638385
0.0678769
0.0717292
0.0753849
0.078834
0.082067
0.0850751
0.08785
Process [2]
0.0903841
0.0926704
0.0947028
0.0964756
0.0979839
0.0992237
0.100192
0.100885
0.101301
0.10144
Process [3]
0.101301
0.100885
0.100192
0.0992237
0.0979839
0.0964756
0.0947028
0.0926704
0.0903841
0.08785
Process [4]
0.0850751
0.082067
0.078834
0.0753849
0.0717292
0.0678769
0.0638385
0.0596252
0.0552484
0.0507202
Process [5]
0.046053
0.0412595
0.036353
0.0313468
0.0262547
0.0210907
0.0158688
0.0106034
0.00530898
0.
**************************************** ***********************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: -------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./explicit on a  named ubuntu with 6 processors, by hjy Fri Jun 10 02:11:33 2022
Using Petsc Release Version 3.17.1, Apr 28, 2022 

                         Max       Max/Min     Avg       Total
Time (sec):           3.644e+02     1.000   3.644e+02
Objects:              1.400e+01     1.000   1.400e+01
Flops:                7.500e+06     1.103   7.050e+06  4.230e+07
Flops/sec:            2.058e+04     1.103   1.935e+04  1.161e+05
Memory (bytes):       2.787e+05     1.000   2.786e+05  1.672e+06
MPI Msg Count:        1.000e+06     2.000   6.667e+05  4.000e+06
MPI Msg Len (bytes):  8.002e+06     2.000   8.002e+00  3.201e+07
MPI Reductions:       6.001e+05     1.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 3.6439e+02 100.0%  4.2300e+07 100.0%  4.000e+06 100.0%  8.002e+00      100.0%  6.001e+05 100.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

BuildTwoSided     100005 1.0 1.0868e+02 1.2 0.00e+00 0.0 1.0e+06 1.2e+01 2.0e+05 27  0 25 37 33  27  0 25 37 33     0
BuildTwoSidedF    100004 1.0 2.2632e+02 1.1 0.00e+00 0.0 3.0e+06 8.0e+00 2.0e+05 60  0 75 75 33  60  0 75 75 33     0
VecView                1 1.0 4.1211e-04 7.2 0.00e+00 0.0 5.0e+00 8.4e+01 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecCopy            99999 1.0 6.5684e-02 1.1 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
VecAXPY            99999 1.0 1.7118e-01 1.2 2.20e+06 1.1 0.0e+00 0.0e+00 0.0e+00  0 29  0  0  0   0 29  0  0  0    71
VecAssemblyBegin  100001 1.0 2.9109e+02 1.1 0.00e+00 0.0 3.0e+06 8.0e+00 4.0e+05 76  0 75 75 67  76  0 75 75 67     0
VecAssemblyEnd    100001 1.0 7.4824e+0015.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  1  0  0  0  0   1  0  0  0  0     0
VecScatterBegin    99999 1.0 4.3150e+00 2.1 0.00e+00 0.0 1.0e+06 8.0e+00 2.0e+00  1  0 25 25  0   1  0 25 25  0     0
VecScatterEnd      99999 1.0 2.5858e+0147.8 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  3  0  0  0  0   3  0  0  0  0     0
MatMult            99999 1.0 2.8768e+01 9.5 5.30e+06 1.1 1.0e+06 8.0e+00 2.0e+00  4 71 25 25  0   4 71 25 25  0     1
MatAssemblyBegin       3 1.0 3.6364e-03 1.0 0.00e+00 0.0 2.0e+01 1.8e+01 1.2e+01  0  0  0  0  0   0  0  0  0  0     0
MatAssemblyEnd         3 1.0 6.1354e-03 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 1.9e+01  0  0  0  0  0   0  0  0  0  0     0
SFSetGraph             1 1.0 3.1440e-06 1.7 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFSetUp                1 1.0 1.4717e-03 1.4 0.00e+00 0.0 2.0e+01 4.0e+00 2.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFPack             99999 1.0 1.2551e-01 2.3 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
SFUnpack           99999 1.0 4.5118e-02 1.4 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00  0  0  0  0  0   0  0  0  0  0     0
------------------------------------------------------------------------------------------------------------------------

Memory usage is given in bytes:

Object Type          Creations   Destructions     Memory  Descendants' Mem.
Reports information only for process 0.

--- Event Stage 0: Main Stage

              Vector     5              5         9024     0.
              Matrix     3              3        11284     0.
           Index Set     2              2         1804     0.
   Star Forest Graph     1              1         1208     0.
       Krylov Solver     1              1         1616     0.
              Viewer     2              1          848     0.
========================================================================================================================
Average time to get PetscTime(): 3.86e-08
Average time for MPI_Barrier(): 0.000196781
Average time for zero size MPI_Send(): 9.68462e-05
#PETSc Option Table entries:
-dt 0.00001
-log_view
-Nodes_Num 60
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --download-mpich=/home/hjy/Soft/petsc-3.16.6-extlibs/mpich-3.4.2.tar.gz --download-fblaslapack --with-debugging=yes --prefix=/home/hjy/Soft/petsc-3.17.1-opt --download-hypre=/home/hjy/Soft/petsc-3.16.6-extlibs/hypre-2.23.0.tar.gz --download-mumps=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-mumps-6d1470374d32.tar.gz --download-metis=/home/hjy/Soft/petsc-3.16.6-extlibs/petsc-pkg-metis-c8d2dc1e751e.tar.gz --download-hdf5=/home/hjy/Soft/petsc-3.16.6-extlibs/hdf5-1.12.1.tar.bz2 COPTFLAGS="-O3 -march=native -mtune=native" CXXOPTFLAGS="-O3 -march=native -mtune=native" FOPTFLAGS="-O3 -march=native -mtune=native" --download-scalapack --with-fc=gfortran --with-fortranlib-autodetect=1
-----------------------------------------
Libraries compiled on 2022-05-23 03:40:19 on ubuntu 
Machine characteristics: Linux-5.4.0-110-generic-x86_64-with-Ubuntu-18.04-bionic
Using PETSc directory: /home/hjy/Soft/petsc-3.17.1-opt
Using PETSc arch: 
-----------------------------------------

Using C compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc  -Wall -Wwrite-strings -Wno-unknown-pragmas -fstack-protector -fvisibility=hidden -O3 -march=native -mtune=native   
Using Fortran compiler: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90  -Wall -ffree-line-length-0 -Wno-unused-dummy-argument -O3 -march=native -mtune=native    
-----------------------------------------

Using include paths: -I/home/hjy/Soft/petsc-3.17.1-opt/include
-----------------------------------------

Using C linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpicc
Using Fortran linker: /home/hjy/Soft/petsc-3.17.1-opt/bin/mpif90
Using libraries: -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -lpetsc -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1-opt/lib -L/home/hjy/Soft/petsc-3.17.1-opt/lib -Wl,-rpath,/home/hjy/lib/hdf5-1.13.1/lib -L/home/hjy/lib/hdf5-1.13.1/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7 -Wl,-rpath,/home/hjy/Soft/petsc-3.17.1 -L/home/hjy/Soft/petsc-3.17.1 -lHYPRE -lcmumps -ldmumps -lsmumps -lzmumps -lmumps_common -lpord -lpthread -lscalapack -lflapack -lfblas -lpthread -lhdf5_hl -lhdf5 -lmetis -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


